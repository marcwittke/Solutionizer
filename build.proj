<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildProjectDirectory)\</SolutionDir>
    <WixDir>$([System.IO.Path]::Combine($(SolutionDir), "packages", "wix.3.7"))</WixDir>
    <TargetDir>$([System.IO.Path]::Combine($(SolutionDir), "publish"))</TargetDir>
    <WxsFile>$(SolutionDir)\Solutionizer.wxs</WxsFile>
  </PropertyGroup>
  
  <Target Name="package">
    <!-- download and extract WiX if necessary -->
    <MakeDir Directories="$(WixDir)" Condition="!Exists('$(WixDir)')" />
    <DownloadWixToolkit OutputFilename="$(WixDir)\wix.zip" Condition="!Exists('$(WixDir)\wix.zip')" />
    <Unzip ZipPath="$(WixDir)\wix.zip" TargetPath="$(WixDir)" Condition="!Exists('$(WixDir)\heat.exe')" />

    <CallTarget Targets="GetGitVersion"/>
    <CallTarget Targets="CreateWixPackage" />
  </Target>

  <Target Name="CreateWixPackage">
    <!--<Exec Command="$(WixDir)\WixCop.exe -indent:2 $(WxsFile)" />-->
    <MakeDir Directories="$(TargetDir)" Condition="!Exists('$(TargetDir)')" />
    <Exec Command="$(WixDir)\candle.exe -out $(TargetDir)\Solutionizer.wixobj $(WxsFile) " />
    <Exec Command="$(WixDir)\light.exe -ext WixNetFxExtension -ext WixUIExtension -ext WixUtilExtension -out $(TargetDir)\Solutionizer-$(VersionString).msi $(TargetDir)\Solutionizer.wixobj" />
  </Target>

  <Target Name="GetGitVersion" Outputs="VersionString;SemanticVersionString">
    <!-- set default version -->
    <PropertyGroup>
      <VersionString Condition="'$(VersionString)'==''">0.0.0.0</VersionString>
      <SemanticVersionString Condition="'$(SemanticVersionString)'==''">0.0.0.0</SemanticVersionString>
    </PropertyGroup>

    <Exec Command='git describe --tags --long > "$(ProjectDir)version.txt"' Outputs="$(ProjectDir)version.txt" WorkingDirectory="$(SolutionDir)" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>
    <Message Importance="high" Text="Calling git failed with exit code $(ExitCode)" Condition="'$(ExitCode)'!='0'" />

    <ReadLinesFromFile File="$(ProjectDir)version.txt" Condition="'$(ExitCode)'=='0'">
      <Output TaskParameter="Lines" ItemName="OutputLines"/>
    </ReadLinesFromFile>
    <Message Importance="normal" Text="Git output: @(OutputLines)" Condition="'$(ExitCode)'=='0'"/>
    <Delete Condition="Exists('$(ProjectDir)version.txt')" Files="$(ProjectDir)version.txt"/>

    <CreateVersionString VersionString="@(OutputLines)" Condition="'$(ExitCode)'=='0'">
      <Output TaskParameter="Version" PropertyName="VersionString"/>
      <Output TaskParameter="Commit" PropertyName="Commit"/>
      <Output TaskParameter="SemanticVersion" PropertyName="SemanticVersionString"/>
    </CreateVersionString>
  </Target>


  <UsingTask TaskName="DownloadWixToolkit" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try {
                    OutputFilename = Path.GetFullPath(OutputFilename);

                    Log.LogMessage("Downloading WiX Toolset v3.7...");
                    WebClient webClient = new WebClient();
                    webClient.DownloadFile("http://wixtoolset.org/releases/v3.7.1222.0/wix37-binaries.zip", OutputFilename);

                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <UsingTask TaskName="Unzip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <ZipPath ParameterType="System.String" Required="true" />
      <TargetPath ParameterType="System.String" Required="true"/>
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Reference Include="System.IO.Compression.FileSystem"/>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try {
                    ZipPath = Path.GetFullPath(ZipPath);

                    Log.LogMessage("Extracting WiX Toolset v3.7...");
                    ZipFile.ExtractToDirectory(ZipPath, TargetPath);
                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
        
            ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
  TaskName="CreateVersionString"
  TaskFactory="CodeTaskFactory"
  AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <VersionString ParameterType="System.String" Required="true" />
      <Version ParameterType="System.String" Output="true" />
      <Commit ParameterType="System.String" Output="true" />
      <SemanticVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <!--<Reference Include="" />-->
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          var match = Regex.Match(VersionString, @"^v(?<major>\d+)\.(?<minor>\d+)(\.(?<patch>\d+))?-(?<revision>\d+)-(?<commit>[a-z0-9]+)$");
          int major, minor, patch, revision;
          Int32.TryParse(match.Groups["major"].Value, out major);
          Int32.TryParse(match.Groups["minor"].Value, out minor);
          Int32.TryParse(match.Groups["patch"].Value, out patch);
          Int32.TryParse(match.Groups["revision"].Value, out revision);
          _Version = new Version(major, minor, patch, revision).ToString();
          _SemanticVersion = major + "." + minor + "." + patch;
          _Commit = match.Groups["commit"].Value;
          if (revision != 0) {
            _SemanticVersion += "-beta" + revision;
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>